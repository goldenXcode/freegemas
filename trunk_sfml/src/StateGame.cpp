#include "StateGame.h"
#include "log.h"
#include "ResourceManager.h"
#include "i18n.h"

StateGame::StateGame(){
    lDEBUG << Log::CON("StateGame");
}
StateGame::~StateGame(){
    lDEBUG << Log::DES("StateGame");
}

void StateGame::loadResources(){
    // Load the font for the timer
    fontTime = ResMgr -> getFont("media/fuentelcd.ttf", 62);

    // Load the font for the scoreboard
    fontScore = ResMgr -> getFont("media/fuentelcd.ttf", 33);

    
    // Load the backgorund image
    spBoard.SetImage(ResMgr -> getImage("media/board.png"));

    // Load the image for the square selector
    spSelector.SetImage(ResMgr -> getImage("media/selector.png"));    
   
    // Load the background image for the scoreboard
    spScoreBackground.SetImage(ResMgr -> getImage("media/scoreBackground.png"));
    spScoreBackground.SetPosition (17, 124);

    // Create the header of the score indicator
    strScoreHeader = sf::String (_("score"),
                                 ResMgr -> getFont("media/fNormal.ttf", 33),
                                 33);
    strScoreHeader.SetPosition (113 - strScoreHeader.GetRect().GetWidth() / 2, 80);

    // Load the background image for the time
    spTimeBackground.SetImage(ResMgr -> getImage("media/timeBackground.png"));
    spTimeBackground.SetPosition(17, 230);

    // Create the header of the time indicator
    strTimeHeader = sf::String(_("time left"),
                               ResMgr -> getFont("media/fNormal.ttf", 33),
                               33);
    strTimeHeader.SetPosition (113 - strTimeHeader.GetRect().GetWidth() / 2, 186);

}
void StateGame::event (sf::Event theEvent){

}
void StateGame::update (bool isCovered){

}
void StateGame::draw (bool isCovered, DrawingQueue& queue){
    queue.Draw(0, spBoard);
    queue.Draw(1, strScoreHeader);
    queue.Draw(1, spScoreBackground);
    queue.Draw(1, strTimeHeader);
    queue.Draw(1, spTimeBackground);
}

/// Tests if the moouse is over a gem
bool overGem(int mX, int mY){
    return false;
}

/// Returns the coords of the gem the mouse is over
coord getCoord(int mX, int mY){

}

/// Redraws the score board
void redrawScoreboard(){

}

/// Creates a small label that indicates the points generated by a match
void createFloatingScores(){

}
    
/// Check if that gem was clicked
bool checkClickedSquare(int mX, int mY){
    return false;
}

/// Shows a hint for a possible match
void showHint(){

}

/// Plays the sound for the match
void playMatchSound(){

}

/// Resets the game
void resetGame(){

}
